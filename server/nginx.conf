events {
    worker_connections 4096;  # 2048から4096に増加
    use epoll;
    multi_accept on;
}

http {
    include       /opt/nginx-h3/conf/mime.types;
    default_type  application/octet-stream;

    # Performance optimizations
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    keepalive_requests 5000;  # 1000から5000に増加
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'protocol:$server_protocol version:$http3';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # HTTP/2 server (port 80) - for comparison
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root   /opt/nginx-h3/html;
            index  index.html index.htm;
        }
        
        # Simple echo endpoint for testing
        location /echo {
            add_header Content-Type text/plain;
            add_header X-Server-Protocol $server_protocol;
            add_header X-Request-Time $request_time;
            return 200 "Hello from nginx HTTP/2! Protocol: $server_protocol\n";
        }
        
        # Health check endpoint
        location /health {
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTP/2 and HTTP/3 server (port 443) - main server
    server {
        listen 443 ssl http2;
        listen 443 quic reuseport;
        
        server_name localhost;
        
        # SSL configuration
        ssl_certificate /opt/nginx-h3/certs/server.crt;
        ssl_certificate_key /opt/nginx-h3/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HTTP/3 support - force HTTP/3 when possible
        add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400' always;
        add_header X-Proto $http3 always;
        add_header X-Server-Protocol $server_protocol always;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # HTTP/3/QUIC最適化パラメータ
        # quic_max_idle_timeout 60s;
        # quic_initial_max_data 10MB;
        # quic_initial_max_stream_data_bidi_local 2MB;
        # quic_initial_max_stream_data_bidi_remote 2MB;
        # quic_initial_max_stream_data_uni 2MB;
        # quic_initial_max_streams_bidi 100;
        # quic_initial_max_streams_uni 100;
        # quic_active_connection_id_limit 16;
        ssl_early_data on;
        
        location / {
            root   /opt/nginx-h3/html;
            index  index.html index.htm;
        }
        
        # Enhanced echo endpoint for testing
        location /echo {
            # Force HTTP/3 headers
            add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400' always;
            add_header Content-Type text/plain;
            add_header X-Server-Protocol $server_protocol;
            add_header X-Request-Time $request_time;
            add_header X-Connection-Time $connection_time;
            add_header X-Request-ID $request_id;
            
            # Return detailed response
            return 200 "Hello from nginx! Protocol: $server_protocol, HTTP/3: $http3, Time: $request_time\n";
        }
        
        # Health check endpoint
        location /health {
            add_header Content-Type text/plain;
            return 200 "OK\n";
        }
        
        # Protocol info endpoint
        location /protocol {
            add_header Content-Type application/json;
            return 200 '{"protocol": "$server_protocol", "http3": "$http3", "time": "$request_time"}';
        }
    }
} 