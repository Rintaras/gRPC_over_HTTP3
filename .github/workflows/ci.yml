name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  python-lint-and-import-check:
    name: Python Lint & Import Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint (flake8)
        run: flake8 .

      - name: Import smoke test
        run: |
          python - <<'PY'
          import importlib.util, pathlib
          import sys
          root = pathlib.Path('scripts')
          failures = []
          for p in root.glob('*.py'):
              spec = importlib.util.spec_from_file_location(p.stem, p)
              try:
                  m = importlib.util.module_from_spec(spec)
                  spec.loader.exec_module(m)  # type: ignore
              except Exception as e:
                  failures.append(f"{p}: {e}")
          if failures:
              sys.stderr.write("\n".join(failures)+"\n")
              sys.exit(1)
          PY

  rust-check:
    name: Rust Build & Clippy (quiche-client)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quiche-client
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            quiche-client/target
          key: cargo-${{ runner.os }}-${{ hashFiles('quiche-client/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Build
        run: cargo build --workspace --locked

      - name: Clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  docker-build:
    name: Docker Build (no push)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: server/Dockerfile
          push: false
          tags: test/server:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build client image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: client/Dockerfile
          push: false
          tags: test/client:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build router image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: router/Dockerfile
          push: false
          tags: test/router:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

